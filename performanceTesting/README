tjtwelf-timing:
  This script is for running timing benchmarks on tjtwelf.
  The timing output is the amount of (CPU) time to translate and load
  the specification and queries into the simulator as well as solve and
  print the queries.

  We use Sys.time in a timing wrapper to calculate the time for
  various parts of the process: parsing the signature (includes type
  reconstruction), translating the signature, loading the translated
  singature into the teyjus simulator, parsing the queries (includes
  type reconstruction), translating queries, loading queries into
  simulator to be solved, solving queries, and printing solutions
  (includes inversion).

  To use, create a file with the extension `.lf' containing the
  signature and a file names `queries.txt' with the set of queries you
  wish to be run (see existing examples for format).

twelf-timing:
  This script is for running timing benchmarks on Twelf.
  The timing output is the amount of (CPU) time to load the specification and 
  solve the query in Twelf.

  This uses the built-in twelf timers, collecting the
  Parsing and Reconstruction time for both the signature and queries and the
  time to solve and print queries.

  To use, create a file with extension `.elf' containing the signature
  along with a set of `.elf' files each containing a query. To run pass
  the signature file as the first argument and then each of the queries
  you wish to run. A text file listing the queries, such as
  twelf_queries.txt, can be useful in making it easier to pass a large
  number of queries.


benchmarks run:
===============
reverse - reverse a list of size n
miniml - double encoding of the number n
miniml-typed - sum the encoding of n with 10
perm - find a permutation of a list of size n
num - transform an expression of length n into a normal form
