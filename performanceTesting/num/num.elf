num : type.
+ : num -> num -> num.

z : num.  % Zero.
s : num.  % One.
prop : type.
== : num -> num -> prop.

pf : prop -> type.
refl : {N:num} pf (== N N).
symm : {N1:num} {N2:num} pf (== N1 N2) -> pf (== N2 N1).
trans :
   {N1:num} {N2:num} {N3:num} pf (== N1 N2) -> pf (== N2 N3) -> pf (== N1 N3).

plus_assoc :
   {N1:num} {N2:num} {N3:num} pf (== (+ (+ N1 N2) N3) (+ N1 (+ N2 N3))).
plus_comm : {N1:num} {N2:num} pf (== (+ N1 N2) (+ N2 N1)).
plus_zero : {N1:num} pf (== (+ N1 z) N1).
plus_cong :
   {N1:num} {N1':num} {N2:num} {N2':num}
      pf (== N1 N1') -> pf (== N2 N2') -> pf (== (+ N1 N2) (+ N1' N2')).
plus_elim1 :
   {N1:num} {N2:num} {N2':num} pf (== (+ N1 N2) (+ N1 N2')) -> pf (== N2 N2').
plus_elim2 :
   {N1:num} {N2:num} {N1':num} pf (== (+ N1 N2) (+ N1' N2)) -> pf (== N1 N1').

list : num -> num -> type.
list-swap :
   {A:num} {B:num} {C:num} {D:num} list (+ (+ A B) C) D -> list (+ A (+ B C)) D.
list-step : {A:num} {B:num} {C:num} list A B -> list (+ A C) (+ B C).
list-stop : {A:num} list A A.

mklist : {A:num} {B:num} pf (== A B) -> type.
mklist-swap :
   {A:num} {B:num} {C:num} {D:num} {Pf:pf (== (+ (+ A B) C) D)}
      mklist (+ (+ A B) C) D Pf
         -> mklist (+ A (+ B C)) D
               (trans (+ A (+ B C)) (+ (+ A B) C) D
                   (symm (+ (+ A B) C) (+ A (+ B C)) (plus_assoc A B C)) Pf).
mklist-step :
   {A:num} {B:num} {Pf:pf (== A B)} {C:num}
      mklist A B Pf -> mklist (+ A C) (+ B C) (plus_cong A B C C Pf (refl C)).
mklist-stop : {A:num} mklist A A (refl A).


