sort : type.
arrow : sort -> sort -> sort.
cross : sort -> sort -> sort.
trm : sort -> type.
app : {A:sort} {B:sort} trm (arrow A B) -> trm A -> trm B.
lam : {A:sort} {B:sort} (trm A -> trm B) -> trm (arrow A B).
pair : {A:sort} {B:sort} trm A -> trm B -> trm (cross A B).
eval : {A:sort} trm A -> trm A -> type.
eval_lam :
   {X1:sort} {X2:sort} {E:trm X1 -> trm X2}
      eval (arrow X1 X2) (lam X1 X2 ([x:trm X1] E x))
         (lam X1 X2 ([x:trm X1] E x)).
eval_app :
   {X1:sort} {X2:sort} {E:trm X2 -> trm X1} {V':trm X2} {V:trm X1} {E':trm X2}
      eval X1 (E V') V -> eval X2 E' V'
         -> eval X1 (app X2 X1 (lam X2 X1 ([x:trm X2] E x)) E') V.
atm : type.
frm : type.
int : sort.
'1 : trm int.
'2 : trm int.
'3 : trm int.
'4 : trm int.
'5 : trm int.
list : sort -> sort.
nil : {A:sort} trm (list A).
| : {A:sort} trm A -> trm (list A) -> trm (list A).
^ : atm -> frm.
iImp : frm -> frm -> frm.
lImp : frm -> frm -> frm.
orImp : frm -> frm -> frm.
olImp : frm -> frm -> frm.
forall : {s:sort} (trm s -> frm) -> frm.
forall2 : {s1:sort} {s2:sort} ((trm s1 -> trm s2) -> frm) -> frm.
elmt : type.
del : elmt.
elt : frm -> elmt.
rctx : type.
rnil : rctx.
'r : rctx -> elmt -> rctx.
appr : rctx -> rctx -> rctx -> type.
appr_0 : {R:rctx} appr R rnil R.
appr_1 :
   {R:rctx} {T:rctx} {T':rctx} {H:elmt} appr R T T' -> appr R ('r T H) ('r T' H).
lctx : type.
lnil : lctx.
'l : elmt -> lctx -> lctx.
appl : lctx -> lctx -> lctx -> type.
appl_0 : {L:lctx} appl lnil L L.
appl_1 :
   {T:lctx} {L:lctx} {T':lctx} {H:elmt} appl T L T' -> appl ('l H T) L ('l H T').
l2r : lctx -> rctx -> type.
l2r_0 : l2r lnil rnil.
l2r_1 :
   {H:elmt} {T':rctx} {T'':rctx} {T:lctx}
      appr ('r rnil H) T' T'' -> l2r T T' -> l2r ('l H T) T''.
r2l : rctx -> lctx -> type.
r2l_0 : r2l rnil lnil.
r2l_1 :
   {T':lctx} {H:elmt} {T'':lctx} {T:rctx}
      appl T' ('l H lnil) T'' -> r2l T T' -> r2l ('r T H) T''.
insertAfter : rctx -> elmt -> rctx -> rctx -> type.
insertAfter_0 : {E:elmt} {L:rctx} insertAfter rnil E L ('r L E).
insertAfter_N :
   {I:rctx} {E:elmt} {L:rctx} {L':rctx} {X1:elmt} {H:elmt}
      insertAfter I E L L' -> insertAfter ('r I X1) E ('r L H) ('r L' H).
choose : rctx -> rctx -> frm -> rctx -> type.
choose_0 : {T:rctx} {A:frm} choose ('r T (elt A)) T A rnil.
choose_1 :
   {T:rctx} {Tl:rctx} {A:frm} {Tr:rctx} {E:elmt}
      choose T Tl A Tr -> choose ('r T E) Tl A ('r Tr E).
splitr : rctx -> rctx -> rctx -> type.
spitr_rnil : splitr rnil rnil rnil.
splitr_del : {T:rctx} splitr ('r T del) ('r T del) rnil.
splitr_elt :
   {T:rctx} {Tl:rctx} {Tr:rctx} {A:frm}
      splitr T Tl Tr -> splitr ('r T (elt A)) Tl ('r Tr (elt A)).
splitl : lctx -> lctx -> lctx -> type.
spitl_lnil : splitl lnil lnil lnil.
splitl_del : {T:lctx} splitl ('l del T) lnil ('l del T).
splitl_elt :
   {T:lctx} {Tl:lctx} {Tr:lctx} {A:frm}
      splitl T Tl Tr -> splitl ('l (elt A) T) ('l (elt A) Tl) Tr.
prog : frm -> type.
sqnt : rctx -> rctx -> rctx -> rctx -> frm -> type.
ie_sqnt1 : rctx -> rctx -> rctx -> rctx -> rctx -> rctx -> frm -> atm -> type.
ie_sqnt2 : rctx -> rctx -> rctx -> rctx -> rctx -> rctx -> frm -> atm -> type.
iImp_R :
   {A:frm} {Di:rctx} {Do:rctx} {Oi:rctx} {Oo:rctx} {B:frm}
      (prog A -> sqnt Di Do Oi Oo B) -> sqnt Di Do Oi Oo (iImp A B).
lImp_R :
   {Di:rctx} {A:frm} {Do:rctx} {Oi:rctx} {Oo:rctx} {B:frm}
      sqnt ('r Di (elt A)) ('r Do del) Oi Oo B -> sqnt Di Do Oi Oo (lImp A B).
olImp_R :
   {Oo':lctx} {Oo:rctx} {Oo'':rctx} {Di:rctx} {Do:rctx} {Oi'':rctx} {B:frm}
      {A:frm} {Oi':lctx} {Oi:rctx}
      l2r Oo' Oo -> r2l Oo'' ('l del Oo') -> sqnt Di Do Oi'' Oo'' B
         -> l2r ('l (elt A) Oi') Oi'' -> r2l Oi Oi' -> sqnt Di Do Oi Oo (olImp A B).
orImp_R :
   {Di:rctx} {Do:rctx} {Oi:rctx} {A:frm} {Oo:rctx} {B:frm}
      sqnt Di Do ('r Oi (elt A)) ('r Oo del) B -> sqnt Di Do Oi Oo (orImp A B).
forall_R :
   {Srt:sort} {Di:rctx} {Do:rctx} {Oi:rctx} {Oo:rctx} {Frm:trm Srt -> frm}
      ({x:trm Srt} sqnt Di Do Oi Oo (Frm x))
         -> sqnt Di Do Oi Oo (forall Srt ([x:trm Srt] Frm x)).
forall2_R :
   {Srt1:sort} {Srt2:sort} {Di:rctx} {Do:rctx} {Oi:rctx} {Oo:rctx}
      {Frm:(trm Srt1 -> trm Srt2) -> frm}
      ({x:trm Srt1 -> trm Srt2} sqnt Di Do Oi Oo (Frm ([x1:trm Srt1] x x1)))
         -> sqnt Di Do Oi Oo
               (forall2 Srt1 Srt2
                   ([x:trm Srt1 -> trm Srt2] Frm ([x1:trm Srt1] x x1))).
choice_O :
   {OoL:rctx} {OoR:rctx} {Oo:rctx} {Di:rctx} {Do:rctx} {OiL:rctx} {OiR:rctx}
      {A:frm} {P:atm} {Oi:rctx}
      appr ('r OoL del) OoR Oo -> ie_sqnt1 Di Do OiL OoL OiR OoR A P
         -> choose Oi OiL A OiR -> sqnt Di Do Oi Oo (^ P).
choice_D :
   {Oo':rctx} {Or:rctx} {Oo:rctx} {Ol:rctx} {Om:rctx} {DiR:rctx} {Do':rctx}
      {Do:rctx} {A:frm} {Di':rctx} {Di:rctx} {Oi:rctx} {P:atm} {DiL:rctx}
      appr Oo' Or Oo -> appr Ol Om Oo' -> insertAfter DiR del Do' Do
         -> insertAfter DiR (elt A) Di' Di -> ie_sqnt2 Di' Do' Oi Ol Om Or A P
         -> appr DiL DiR Di' -> choose Di DiL A DiR -> sqnt Di Do Oi Oo (^ P).
choice_G :
   {Oo':rctx} {Or:rctx} {Oo:rctx} {Ol:rctx} {Om:rctx} {Di:rctx} {Do:rctx}
      {Oi:rctx} {A:frm} {P:atm}
      appr Oo' Or Oo -> appr Ol Om Oo' -> ie_sqnt2 Di Do Oi Ol Om Or A P
         -> prog A -> sqnt Di Do Oi Oo (^ P).
forall_L1 :
   {Srt:sort} {Di:rctx} {Do:rctx} {OiL:rctx} {OoL:rctx} {OiR:rctx} {OoR:rctx}
      {Frm:trm Srt -> frm} {P:atm} {t:trm Srt}
      ie_sqnt1 Di Do OiL OoL OiR OoR (Frm t) P
         -> ie_sqnt1 Di Do OiL OoL OiR OoR (forall Srt ([x:trm Srt] Frm x)) P.
forall_L2 :
   {Srt:sort} {Di:rctx} {Do:rctx} {Oi:rctx} {Ol:rctx} {Om:rctx} {Or:rctx}
      {Frm:trm Srt -> frm} {P:atm} {t:trm Srt}
      ie_sqnt2 Di Do Oi Ol Om Or (Frm t) P
         -> ie_sqnt2 Di Do Oi Ol Om Or (forall Srt ([x:trm Srt] Frm x)) P.
forall2_L1 :
   {Srt1:sort} {Srt2:sort} {Di:rctx} {Do:rctx} {OiL:rctx} {OoL:rctx} {OiR:rctx}
      {OoR:rctx} {Frm:(trm Srt1 -> trm Srt2) -> frm} {P:atm}
      {t:trm Srt1 -> trm Srt2}
      ie_sqnt1 Di Do OiL OoL OiR OoR (Frm ([x:trm Srt1] t x)) P
         -> ie_sqnt1 Di Do OiL OoL OiR OoR
               (forall2 Srt1 Srt2
                   ([x:trm Srt1 -> trm Srt2] Frm ([x1:trm Srt1] x x1))) P.
forall2_L2 :
   {Srt1:sort} {Srt2:sort} {Di:rctx} {Do:rctx} {Oi:rctx} {Ol:rctx} {Om:rctx}
      {Or:rctx} {Frm:(trm Srt1 -> trm Srt2) -> frm} {P:atm}
      {t:trm Srt1 -> trm Srt2}
      ie_sqnt2 Di Do Oi Ol Om Or (Frm ([x:trm Srt1] t x)) P
         -> ie_sqnt2 Di Do Oi Ol Om Or
               (forall2 Srt1 Srt2
                   ([x:trm Srt1 -> trm Srt2] Frm ([x1:trm Srt1] x x1))) P.
iImp_L1 :
   {A:frm} {Di:rctx} {Do:rctx} {OiL:rctx} {OoL:rctx} {OiR:rctx} {OoR:rctx}
      {B:frm} {P:atm}
      sqnt rnil rnil rnil rnil A -> ie_sqnt1 Di Do OiL OoL OiR OoR B P
         -> ie_sqnt1 Di Do OiL OoL OiR OoR (iImp A B) P.
lImp_L1 :
   {Dm:rctx} {Do:rctx} {A:frm} {Di:rctx} {OiL:rctx} {OoL:rctx} {OiR:rctx}
      {OoR:rctx} {B:frm} {P:atm}
      sqnt Dm Do rnil rnil A -> ie_sqnt1 Di Dm OiL OoL OiR OoR B P
         -> ie_sqnt1 Di Do OiL OoL OiR OoR (lImp A B) P.
olImp_L1 :
   {OoLL:rctx} {OoA:rctx} {OoL:rctx} {Dm:rctx} {Do:rctx} {OiA:rctx} {A:frm}
      {OoL':rctx} {Di:rctx} {OiL:rctx} {OiR:rctx} {OoR:rctx} {B:frm} {P:atm}
      appr OoLL OoA OoL -> sqnt Dm Do OiA OoA A -> splitr OoL' OoLL OiA
         -> ie_sqnt1 Di Dm OiL OoL' OiR OoR B P
         -> ie_sqnt1 Di Do OiL OoL OiR OoR (olImp A B) P.
orImp_L1 :
   {OoA:rctx} {OoRL:rctx} {OoR:rctx} {Dm:rctx} {Do:rctx} {OiA:rctx} {A:frm}
      {OiAl:lctx} {OoRl':lctx} {OoRl:lctx} {OoR':rctx} {Di:rctx} {OiL:rctx}
      {OoL:rctx} {OiR:rctx} {B:frm} {P:atm}
      appr OoA OoRL OoR -> sqnt Dm Do OiA OoA A -> l2r OiAl OiA
         -> l2r OoRl' OoRL -> splitl OoRl OiAl OoRl' -> r2l OoR' OoRl
         -> ie_sqnt1 Di Dm OiL OoL OiR OoR' B P
         -> ie_sqnt1 Di Do OiL OoL OiR OoR (orImp A B) P.
iImp_L2 :
   {A:frm} {Di:rctx} {Do:rctx} {Oi:rctx} {Ol:rctx} {Om:rctx} {Or:rctx} {B:frm}
      {P:atm}
      sqnt rnil rnil rnil rnil A -> ie_sqnt2 Di Do Oi Ol Om Or B P
         -> ie_sqnt2 Di Do Oi Ol Om Or (iImp A B) P.
lImp_L2 :
   {Dm:rctx} {Do:rctx} {A:frm} {Di:rctx} {Oi:rctx} {Ol:rctx} {Om:rctx} {Or:rctx}
      {B:frm} {P:atm}
      sqnt Dm Do rnil rnil A -> ie_sqnt2 Di Dm Oi Ol Om Or B P
         -> ie_sqnt2 Di Do Oi Ol Om Or (lImp A B) P.
olImp_L2 :
   {Ol':rctx} {OmL:rctx} {Ol:rctx} {Om':rctx} {OmR:rctx} {Dm:rctx} {Do:rctx}
      {Om:rctx} {A:frm} {Di:rctx} {Oi:rctx} {Or:rctx} {B:frm} {P:atm}
      appr Ol' OmL Ol -> splitr Om' OmL OmR -> sqnt Dm Do Om Om' A
         -> ie_sqnt2 Di Dm Oi Ol' Om Or B P
         -> ie_sqnt2 Di Do Oi Ol OmR Or (olImp A B) P.
orImp_L2 :
   {OmR:rctx} {Or':rctx} {Or:rctx} {OmRl:lctx} {OmLl:lctx} {OmL:rctx}
      {Om'l:lctx} {Om':rctx} {Dm:rctx} {Do:rctx} {Om:rctx} {A:frm} {Di:rctx}
      {Oi:rctx} {Ol:rctx} {B:frm} {P:atm}
      appr OmR Or' Or -> l2r OmRl OmR -> l2r OmLl OmL -> splitl Om'l OmLl OmRl
         -> r2l Om' Om'l -> sqnt Dm Do Om Om' A
         -> ie_sqnt2 Di Dm Oi Ol Om Or' B P
         -> ie_sqnt2 Di Do Oi Ol OmL Or (orImp A B) P.
init_1 :
   {Di:rctx} {OiL:rctx} {OiR:rctx} {P:atm}
      ie_sqnt1 Di Di OiL OiL OiR OiR (^ P) P.
init_2 : {Di:rctx} {Oi:rctx} {P:atm} ie_sqnt2 Di Di Oi rnil Oi rnil (^ P) P.
perm : {A:sort} trm (list A) -> trm (list A) -> atm.
rev : {A:sort} trm (list A) -> trm (list A) -> atm.
id : {A:sort} trm (list A) -> trm (list A) -> atm.
idl : {A:sort} trm (list A) -> trm (list A) -> atm.
elem : trm int -> atm.
perm1 :
   {X:trm int} {L:trm (list int)} {K:trm (list int)}
      prog
         (lImp (lImp (^ (elem X)) (^ (perm int L K))) (^ (perm int (| int X L) K))).
perm2 :
   {K:trm (list int)} {X:trm int}
      prog
         (lImp (^ (perm int (nil int) K))
             (lImp (^ (elem X)) (^ (perm int (nil int) (| int X K))))).
perm3 : {X1:sort} prog (^ (perm X1 (nil X1) (nil X1))).
rev1 :
   {X:trm int} {L:trm (list int)} {K:trm (list int)}
      prog
         (orImp (orImp (^ (elem X)) (^ (rev int L K))) (^ (rev int (| int X L) K))).
rev2 :
   {K:trm (list int)} {X:trm int}
      prog
         (orImp (^ (rev int (nil int) K))
             (orImp (^ (elem X)) (^ (rev int (nil int) (| int X K))))).
rev3 : {X1:sort} prog (^ (rev X1 (nil X1) (nil X1))).
id1 :
   {X:trm int} {L:trm (list int)} {K:trm (list int)}
      prog (orImp (olImp (^ (elem X)) (^ (id int L K))) (^ (id int (| int X L) K))).
id2 :
   {K:trm (list int)} {X:trm int}
      prog
         (orImp (^ (id int (nil int) K))
             (orImp (^ (elem X)) (^ (id int (nil int) (| int X K))))).
id3 : {X1:sort} prog (^ (id X1 (nil X1) (nil X1))).
idl1 :
   {X:trm int} {L:trm (list int)} {K:trm (list int)}
      prog
         (olImp (olImp (^ (elem X)) (^ (idl int L K))) (^ (idl int (| int X L) K))).
idl2 :
   {K:trm (list int)} {X:trm int}
      prog
         (orImp (^ (idl int (nil int) K))
             (orImp (^ (elem X)) (^ (idl int (nil int) (| int X K))))).
idl3 : {X1:sort} prog (^ (idl X1 (nil X1) (nil X1))).


%query * 1
(sqnt rnil rnil rnil rnil
   (^ (perm int
            (| int '1 (| int '2 (| int '3 (| int '4 (| int '5 
               (| int '5 (| int '4 (| int '3 (| int '2 (| int '1
               (nil int)))))))))))
            L))).


%query * 1
(sqnt rnil rnil rnil rnil
   (^ (perm int
            (| int '1 (| int '2 (| int '3 (| int '4 (| int '5 
               (| int '5 (| int '4 (| int '3 (| int '2 (| int '1
               (| int '1 (| int '2 (| int '3 (| int '4 (| int '5 
               (| int '5 (| int '4 (| int '3 (| int '2 (| int '1
               (nil int)))))))))))))))))))))
            L))).


%query * 1
(sqnt rnil rnil rnil rnil
   (^ (perm int
            (| int '1 (| int '2 (| int '3 (| int '4 (| int '5 
               (| int '5 (| int '4 (| int '3 (| int '2 (| int '1
               (| int '1 (| int '2 (| int '3 (| int '4 (| int '5 
               (| int '5 (| int '4 (| int '3 (| int '2 (| int '1
               (| int '1 (| int '2 (| int '3 (| int '4 (| int '5 
               (| int '5 (| int '4 (| int '3 (| int '2 (| int '1
               (nil int)))))))))))))))))))))))))))))))
            L))).


%query * 1
(sqnt rnil rnil rnil rnil
   (^ (perm int
            (| int '1 (| int '2 (| int '3 (| int '4 (| int '5 
               (| int '5 (| int '4 (| int '3 (| int '2 (| int '1
               (| int '1 (| int '2 (| int '3 (| int '4 (| int '5 
               (| int '5 (| int '4 (| int '3 (| int '2 (| int '1
               (| int '1 (| int '2 (| int '3 (| int '4 (| int '5 
               (| int '5 (| int '4 (| int '3 (| int '2 (| int '1
               (| int '1 (| int '2 (| int '3 (| int '4 (| int '5 
               (| int '5 (| int '4 (| int '3 (| int '2 (| int '1
               (nil int)))))))))))))))))))))))))))))))))))))))))
            L))).


%query * 1
(sqnt rnil rnil rnil rnil
   (^ (perm int
            (| int '1 (| int '2 (| int '3 (| int '4 (| int '5 
               (| int '5 (| int '4 (| int '3 (| int '2 (| int '1
               (| int '1 (| int '2 (| int '3 (| int '4 (| int '5 
               (| int '5 (| int '4 (| int '3 (| int '2 (| int '1
               (| int '1 (| int '2 (| int '3 (| int '4 (| int '5 
               (| int '5 (| int '4 (| int '3 (| int '2 (| int '1
               (| int '1 (| int '2 (| int '3 (| int '4 (| int '5 
               (| int '5 (| int '4 (| int '3 (| int '2 (| int '1
               (| int '1 (| int '2 (| int '3 (| int '4 (| int '5 
               (| int '5 (| int '4 (| int '3 (| int '2 (| int '1
               (nil int)))))))))))))))))))))))))))))))))))))))))))))))))))
            L))).
